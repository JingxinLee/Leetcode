# -*- coding:utf-8 -*-
"""
author: lijingxin
Created on 上午11:01 2020/7/7
请实现一个函数，输入一个整数，输出该数二进制表示中 1 的个数。
例如，把 9表示成二进制是 1001，有 2 位是 1。因此，如果输入 9，则该函数输出 2。

示例 1：
输入：00000000000000000000000000001011
输出：3
解释：输入的二进制串 00000000000000000000000000001011中，共有三位为 '1'。

示例 2：
输入：00000000000000000000000010000000
输出：1
解释：输入的二进制串 00000000000000000000000010000000中，共有一位为 '1'。

示例 3：
输入：11111111111111111111111111111101
输出：31
解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。

如果一个整数不为0，那么这个整数至少有一位是1。如果我们把这个整数减1，那么原来处在整数最右边的1就会变为0，
原来在1后面的所有的0都会变成1(如果最右边的1后面还有0的话)。其余所有位将不会受到影响。

举个例子：一个二进制数1100，从右边数起第三位是处于最右边的一个1。
减去1后，第三位变成0，它后面的两位0变成了1，而前面的1保持不变，因此得到的结果是1011.
我们发现减1的结果是把最右边的一个1开始的所有位都取反了。
这个时候如果我们再把原来的整数和减去1之后的结果做与运算，从原来整数最右边一个1那一位开始所有位都会变成0。
如1100&1011=1000.也就是说，把一个整数减去1，再和原整数做与运算，会把该整数最右边一个1变成0.
那么一个整数的二进制有多少个1，就可以进行多少次这样的操作。
"""
class Solution:
    def hammingWeight(self, n: int) -> int:
        counts = 0
        if n < 0:
            # python中首先明确一点就是二进制没有位数的概念，所以也就无法获得负数真实表示方法
            # 将负数的影响用于0xffffffff相与变为python认为的正数（与机器中的补码相同）
            n = n & 0xffffffff
        while n:
            counts += 1
            n = (n-1) & n
        return  counts

class Solution:2
    def hammingWeight(self, n: int) -> int:
        counts = 0
        while n:
            if (n & 1):
                counts += 1
            n = n >> 1
        return  counts

